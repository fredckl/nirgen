{"version":3,"sources":["helpers/department.js","helpers/month.js","helpers/luhn.js","helpers/year.js","helpers/shuffle.js","helpers/nir.js","helpers/ramdom.js","helpers/populateNilOrEmpty.js","components/NirForm.js","App.js","reportWebVitals.js","index.js"],"names":["getNumberOfDepartments","map","prop","departments","getMonths","R","luhn","value","parseInt","dMin","moment","duration","dMax","getYears","aMin","subtract","format","aMax","arrayYears","push","year","my","label","reverse","shuffle","array","sort","Math","random","getFirstOfArrayShuffle","compose","head","toString","v","randomInt","floor","randomCent","join","Array","generateNIR","props","applySpec","sex","propOr","month","department","replace","slice","toUpper","when","is","Number","comm","ordre","key","gt","replaceCorseDpt","max","min","populateNilOrEmpty","data","months","length","NirForm","useState","nir","setNir","nirObj","setNirObj","useForm","handleSubmit","register","className","onSubmit","values","error","console","log","id","d","sortBy","type","onCopy","toastr","success","text","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a4c5f04.chunk.js","sourcesContent":["import departments from '../data/departments.json';\nimport {compose, map, prop, sortBy} from 'ramda';\n\nexport const getNumberOfDepartments = () => map(prop('num_dep'))(departments);\nexport const getZipDepartments = () => compose(\n  map(d => [prop('num_dep', d), prop('dep_name', d)]),\n  sortBy(prop('dep_name'))\n)(departments);\n","import * as R from 'ramda';\nconst getMonths = R.split(',', '01,02,03,04,05,06,07,08,09,10,11,12');\n\nexport default getMonths;","const luhn = value => 97 - ((parseInt(value)) % 97);\nexport default luhn;","import moment from 'moment';\nimport { map } from 'ramda';\n\nconst dMin = moment.duration(0, 'y');\nconst dMax = moment.duration(120, 'y');\n\nexport const getMajorYear = () => moment().subtract(dMin).format('YY');\n\nexport const getYears = () => {\n  const aMin = moment().subtract(dMin).format('YYYY');\n  let aMax = moment().subtract(dMax).format('YYYY');\n  const arrayYears = []\n  while (aMax <= aMin) {\n    arrayYears.push(aMax++)\n  }\n\n  const formatDate = year => {\n    const my = moment(`${year}-01-01`);\n    return {\n      label: my.format('YYYY'),\n      value: my.format('YY')\n    }\n  }\n  return (map(formatDate)(arrayYears)).reverse()\n}\n\n","const shuffle = (array) => array.sort(() => Math.random() - 0.5);\n\nexport default shuffle;\n","\nimport luhn from './luhn';\nimport {\n  length,\n  equals,\n  indexOf,\n  replace,\n  splitAt,\n  when,\n  compose,\n  propOr,\n  head,\n  applySpec,\n  gt,\n  is,\n  slice,\n  join,\n  map,\n  toUpper\n} from 'ramda';\nimport { getYears } from './year';\nimport getMonths from './month';\nimport shuffle from './shuffle';\nimport { getNumberOfDepartments } from './department';\n\nexport const validateNIR = (nir) => {\n  if (equals(15, length(nir))) {\n    // Check if nir has letter\n    if (equals(5, indexOf('2B', nir))) {\n      nir = replace('2B', 18, nir);\n    } else if (equals(5, indexOf('2A', nir))) {\n      nir = replace('2A', 19, nir);\n    }\n    const [nirWithoutKey, nirKey] = splitAt(13, nir);\n    return equals(parseInt(nirKey), luhn(nirWithoutKey));\n  }\n  return false;\n};\n\nconst getFirstOfArrayShuffle  = compose(head, shuffle);\nconst toString = v => `${v}`\nconst randomInt = () => Math.floor(Math.random(1) * 10);\nconst randomCent = () => compose(\n  toString,\n  join(''),\n  map(randomInt),\n  v=> new Array(v)\n  )(3);\n\n\nexport const generateNIR = (props) => {\n  const {\n    sex, year, month, department, comm, ordre\n  } = applySpec({\n    sex: propOr(getFirstOfArrayShuffle(['1', '2']), 'sex'),\n    year: propOr(getFirstOfArrayShuffle(getYears()), 'year'),\n    month: propOr(getFirstOfArrayShuffle(getMonths), 'month'),\n    department: compose(\n      toString,\n      replace('2A', '19'),\n      replace('2B','18'),\n      slice(0, 2),\n      toUpper,\n      when(is(Number), toString),\n      propOr(getFirstOfArrayShuffle(getNumberOfDepartments()), 'department')),\n    comm: propOr(randomCent(), 'comm'),\n    ordre: propOr(randomCent(), 'ordre')\n  })(props);\n\n  const key = compose(when(gt(10), v => `0${v}`),luhn)(sex + year + month + department + comm + ordre);\n\n  const replaceCorseDpt = compose(\n    replace('19', '2A'),\n    replace('18', '2B')\n  )(department)\n\n  return [`${sex}${year}${month}${replaceCorseDpt}${comm}${ordre}${key}`, {\n    sex, year, month, department: replaceCorseDpt, comm, ordre, key\n  }]\n}\n\n\n","const random = (max, min = 0) => {\n  return Math.floor((Math.random() * max) + min)\n}\n\nexport default random;","import { length } from \"ramda\";\nimport { getNumberOfDepartments } from \"./department\";\nimport getMonths from \"./month\";\nimport random from \"./ramdom\";\nimport moment from \"moment\";\n\nconst populateNilOrEmpty = (data) => {\n  if(!data.year) {\n    data.year = moment().subtract(random(65, 18)).format('YY');\n  }\n\n  if(!data.month) {\n    const months = getMonths;\n    data.month = months[random(length(months))]\n  }\n\n  if(!data.department) {\n    const departments = getNumberOfDepartments(); \n    data.department = departments[random(length(departments))]\n  }\n\n  if(!data.sex) {\n    data.sex = random(2, 1); \n  }\n\n  return data\n}\n\nexport default populateNilOrEmpty;","import { compose } from 'ramda';\nimport React, { useState } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { useForm } from 'react-hook-form';\nimport toastr from 'toastr';\nimport { getZipDepartments } from '../helpers/department';\nimport getMonths from '../helpers/month';\nimport { generateNIR } from '../helpers/nir';\nimport populateNilOrEmpty from '../helpers/populateNilOrEmpty';\nimport { getYears } from '../helpers/year';\n\nconst NirForm = () => {\n  const [nir, setNir] = useState(null);\n  const [nirObj, setNirObj] = useState({});\n  const { handleSubmit, register } = useForm();\n\n  const onSubmit = (values) => {\n    const [nir, data] = compose(generateNIR, populateNilOrEmpty)(values);\n    setNir(nir);\n    setNirObj(data);\n  };\n\n  const onError = (error) => {\n    console.log(error);\n  };\n  return (\n    <div className=\"page\">\n      <h2 className=\"title\">Générateur de NIR</h2>\n      <div className=\"form-container\">\n        <form onSubmit={handleSubmit(onSubmit, onError)} className=\"form-nir\">\n          <div className=\"form-control\">\n            <select id=\"sex\" {...register('sex')}>\n              <option value=\"\">-- Sexe --</option>\n              <option value=\"1\">Homme</option>\n              <option value=\"2\">Femme</option>\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <select id=\"year\" {...register('year')}>\n              <option value=\"\">-- Année --</option>\n              {getYears().map(({label, value}) => (\n                <option key={`${value}-${label}`} value={value}>\n                  {label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-control\">\n            <select id=\"month\" {...register('month')}>\n              <option value=\"\">-- Mois --</option>\n              {getMonths.sort().map((v) => (\n                <option key={v} value={v}>\n                  {v}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-control\">\n            <select id=\"department\" {...register('department')}>\n              <option value=\"\">-- Département --</option>\n              {getZipDepartments().map((v) => (\n                <option key={v[0]} value={v[0]}>\n                  {v[1]}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <button type=\"submit\" id=\"btn-gen\">générer</button>\n          </div>\n        </form>\n        <CopyToClipboard onCopy={() => nir && toastr.success('Copié')} text={nir}>\n          <div className=\"result\">\n              <span>\n                {nirObj.sex} {nirObj.year} {nirObj.month} {nirObj.department}{' '}\n                {nirObj.comm} {nirObj.ordre} {nirObj.key}\n              </span>\n          </div>\n        </CopyToClipboard>\n      </div>\n    </div>\n  );\n};\n\nexport default NirForm;\n","// import logo from './logo.svg';\nimport './css/reset.css';\nimport './css/toastr.css'\nimport './App.css';\nimport NirForm from './components/NirForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NirForm/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}